# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: js-sdk

on:
  push:
    branches: [ development ]
    paths:
    - '**.py'
    - 'pyproject.toml'
    - 'poetry.lock'
  pull_request:
    branches: [ development ]
    paths:
    - '**.py'
    - '.github/workflows/**.yml'
    - 'pyproject.toml'
    - 'poetry.lock'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      # max-parallel: 9
      matrix:
        os: [ubuntu-20.04]
        python-version: [3.7, 3.8, 3.9]
        experimental: [false]
        include:
          - os: ubuntu-22.04
            python-version: '3.10'
            experimental: true
            name: Experimental build - latest Ubuntu
          - os: ubuntu-22.04
            python-version: 3.11
            experimental: true
            name: Experimental build - latest Python
    steps:
      - uses: actions/checkout@master
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Gathering deps
        run: |
          sudo apt-get update
          sudo apt-get install -y git python3-pip python3-venv python3-setuptools tmux redis restic nginx cron
          sudo service redis stop
          sudo service nginx stop
          pip3 install poetry
      - name: Install
        run: |
          poetry config virtualenvs.in-project true
          poetry run pip3 install pytest selenium
          poetry install
      - name: Run tests
        env:
          TNAME: ${{ secrets.TNAME }}
          EMAIL: ${{ secrets.EMAIL }}
          WORDS: ${{ secrets.WORDS }}
          FAKE_EMAIL: ${{ secrets.FAKE_EMAIL }}
          FAKE_GITHUB_TOKEN: ${{ secrets.FAKE_GITHUB_TOKEN }}
        run: |
          POETRY=$(which poetry)
          sudo --preserve-env=TNAME --preserve-env=EMAIL --preserve-env=WORDS --preserve-env=FAKE_EMAIL --preserve-env=FAKE_GITHUB_TOKEN \
          $POETRY run pytest tests -sv -m "unittests"
